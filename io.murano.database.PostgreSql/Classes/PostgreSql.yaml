Namespaces:
  =: io.murano.database
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: PostgreSql

Extends:
  - Sql
  - std:Application

Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: !yaql "not bool($.getAttr(deployed))"
        Then:
          - $.environment.reporter.report($this, 'Creating VM for PostgreSql')
          - $securityGroupIngress:
              - ToPort: 5432
                FromPort: 5432
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          # Deploy PostgreSql
          - $.environment.reporter.report($this, 'Instance is created. Deploying PostgreSql')
          - $template: $resources.yaml('DeployPostgreSql.template')
          - $.instance.agent.call($template, $resources)
          - $.environment.reporter.report($this, 'PostgreSql application is installed.')
          - $.setAttr(deployed, True)

  createDatabase:
    Body:
      - If: !yaql "not bool($.getAttr(deployed))"
        Then:
          - $.deploy()
      - $this.find(std:Environment).reporter.report($this, 'Creating ' + $database + ' database.')
      # Creating Database on PostgreSQL
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('CreatePostgreSqlDatabase.template').bind(dict(
            database => $database
          ))
      - $.instance.agent.call($template, $resources)
      - $.environment.reporter.report($this, 'Database ' + $database + ' created')

  createUser:
    Body:
      - $this.find(std:Environment).reporter.report($this, 'Creating ' + $username + ' user.')
      # Creating Database on PostgreSQL
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('CreatePostgreSqlUser.template').bind(dict(
            username => $username,
            password => $password
          ))
      - $.instance.agent.call($template, $resources)
      - $.environment.reporter.report($this, 'User ' + $username + ' created')

  assignUser:
    Body:
      - $this.find(std:Environment).reporter.report($this, 'Assigning user' + $username + ' to database ' + $database)
      # Assigning user to PostgresQL database
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('AssignUserPostgreSql.template').bind(dict(
            username => $username,
            database => $database
          ))
      - $.instance.agent.call($template, $resources)
      - $.environment.reporter.report($this, 'User ' + $username + ' assigned to database ' + $database)

  getConnectionString:
    Body:
      - If: $.instance.assignFloatingIP
        Then:
          - $host: $.instance.assignFloatingIP
        Else:
          - $host: $.instance.ipAddresses[0]
      - Return: ('psql://{0}@{1}:{2}'.format($username, $password, $host))






